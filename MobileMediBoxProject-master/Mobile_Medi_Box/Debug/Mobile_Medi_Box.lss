
Mobile_Medi_Box.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000078e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b0  00800060  0000078e  00000822  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800110  00800110  000008d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000904  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000940  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011e3  00000000  00000000  00000a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c0  00000000  00000000  00001c1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000972  00000000  00000000  000022db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000023c  00000000  00000000  00002c50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000483  00000000  00000000  00002e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000857  00000000  00000000  0000330f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00003b66  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	3f 01       	movw	r6, r30
  56:	41 01       	movw	r8, r2
  58:	43 01       	movw	r8, r6
  5a:	45 01       	movw	r8, r10
  5c:	39 01       	movw	r6, r18
  5e:	3b 01       	movw	r6, r22
  60:	3d 01       	movw	r6, r26
  62:	45 01       	movw	r8, r10
  64:	33 01       	movw	r6, r6
  66:	35 01       	movw	r6, r10
  68:	45 01       	movw	r8, r10
  6a:	45 01       	movw	r8, r10
  6c:	45 01       	movw	r8, r10
  6e:	45 01       	movw	r8, r10
  70:	45 01       	movw	r8, r10
  72:	45 01       	movw	r8, r10
  74:	37 01       	movw	r6, r14
  76:	45 01       	movw	r8, r10
  78:	45 01       	movw	r8, r10
  7a:	47 01       	movw	r8, r14

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf e5       	ldi	r28, 0x5F	; 95
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e6       	ldi	r26, 0x60	; 96
  8c:	b0 e0       	ldi	r27, 0x00	; 0
  8e:	ee e8       	ldi	r30, 0x8E	; 142
  90:	f7 e0       	ldi	r31, 0x07	; 7
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a0 31       	cpi	r26, 0x10	; 16
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a0 e1       	ldi	r26, 0x10	; 16
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	ad 31       	cpi	r26, 0x1D	; 29
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 80 03 	call	0x700	; 0x700 <main>
  b2:	0c 94 c5 03 	jmp	0x78a	; 0x78a <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <keypad_init>:
}

void lcd_lef_sh()
{
	lcd_cmd(0x18);      //----Command for Left Shift
	delay(200);
  ba:	80 ef       	ldi	r24, 0xF0	; 240
  bc:	87 bb       	out	0x17, r24	; 23
  be:	8f e0       	ldi	r24, 0x0F	; 15
  c0:	88 bb       	out	0x18, r24	; 24
  c2:	08 95       	ret

000000c4 <search>:
  c4:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <x>
  c8:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <x+0x1>
  cc:	8f 70       	andi	r24, 0x0F	; 15
  ce:	99 27       	eor	r25, r25
  d0:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <x+0x1>
  d4:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <x>
  d8:	8e 30       	cpi	r24, 0x0E	; 14
  da:	91 05       	cpc	r25, r1
  dc:	61 f4       	brne	.+24     	; 0xf6 <search+0x32>
  de:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <r1>
  e2:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <r1+0x1>
  e6:	ee 0f       	add	r30, r30
  e8:	ff 1f       	adc	r31, r31
  ea:	ee 0f       	add	r30, r30
  ec:	ff 1f       	adc	r31, r31
  ee:	e0 5a       	subi	r30, 0xA0	; 160
  f0:	ff 4f       	sbci	r31, 0xFF	; 255
  f2:	80 81       	ld	r24, Z
  f4:	08 95       	ret
  f6:	8d 30       	cpi	r24, 0x0D	; 13
  f8:	91 05       	cpc	r25, r1
  fa:	61 f4       	brne	.+24     	; 0x114 <search+0x50>
  fc:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <r1>
 100:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <r1+0x1>
 104:	ee 0f       	add	r30, r30
 106:	ff 1f       	adc	r31, r31
 108:	ee 0f       	add	r30, r30
 10a:	ff 1f       	adc	r31, r31
 10c:	e0 5a       	subi	r30, 0xA0	; 160
 10e:	ff 4f       	sbci	r31, 0xFF	; 255
 110:	81 81       	ldd	r24, Z+1	; 0x01
 112:	08 95       	ret
 114:	8b 30       	cpi	r24, 0x0B	; 11
 116:	91 05       	cpc	r25, r1
 118:	61 f4       	brne	.+24     	; 0x132 <search+0x6e>
 11a:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <r1>
 11e:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <r1+0x1>
 122:	ee 0f       	add	r30, r30
 124:	ff 1f       	adc	r31, r31
 126:	ee 0f       	add	r30, r30
 128:	ff 1f       	adc	r31, r31
 12a:	e0 5a       	subi	r30, 0xA0	; 160
 12c:	ff 4f       	sbci	r31, 0xFF	; 255
 12e:	82 81       	ldd	r24, Z+2	; 0x02
 130:	08 95       	ret
 132:	07 97       	sbiw	r24, 0x07	; 7
 134:	61 f4       	brne	.+24     	; 0x14e <search+0x8a>
 136:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <r1>
 13a:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <r1+0x1>
 13e:	ee 0f       	add	r30, r30
 140:	ff 1f       	adc	r31, r31
 142:	ee 0f       	add	r30, r30
 144:	ff 1f       	adc	r31, r31
 146:	e0 5a       	subi	r30, 0xA0	; 160
 148:	ff 4f       	sbci	r31, 0xFF	; 255
 14a:	83 81       	ldd	r24, Z+3	; 0x03
 14c:	08 95       	ret
 14e:	8e e6       	ldi	r24, 0x6E	; 110
 150:	08 95       	ret

00000152 <waiting_for_keypress>:
 152:	af 92       	push	r10
 154:	bf 92       	push	r11
 156:	cf 92       	push	r12
 158:	df 92       	push	r13
 15a:	ef 92       	push	r14
 15c:	ff 92       	push	r15
 15e:	0f 93       	push	r16
 160:	1f 93       	push	r17
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
 166:	0f 2e       	mov	r0, r31
 168:	ff ee       	ldi	r31, 0xEF	; 239
 16a:	df 2e       	mov	r13, r31
 16c:	f0 2d       	mov	r31, r0
 16e:	0f 2e       	mov	r0, r31
 170:	ff ed       	ldi	r31, 0xDF	; 223
 172:	cf 2e       	mov	r12, r31
 174:	f0 2d       	mov	r31, r0
 176:	0f 2e       	mov	r0, r31
 178:	ff eb       	ldi	r31, 0xBF	; 191
 17a:	bf 2e       	mov	r11, r31
 17c:	f0 2d       	mov	r31, r0
 17e:	0f 2e       	mov	r0, r31
 180:	ff e7       	ldi	r31, 0x7F	; 127
 182:	af 2e       	mov	r10, r31
 184:	f0 2d       	mov	r31, r0
 186:	01 e0       	ldi	r16, 0x01	; 1
 188:	10 e0       	ldi	r17, 0x00	; 0
 18a:	c2 e0       	ldi	r28, 0x02	; 2
 18c:	d0 e0       	ldi	r29, 0x00	; 0
 18e:	0f 2e       	mov	r0, r31
 190:	f3 e0       	ldi	r31, 0x03	; 3
 192:	ef 2e       	mov	r14, r31
 194:	f1 2c       	mov	r15, r1
 196:	f0 2d       	mov	r31, r0
 198:	86 b3       	in	r24, 0x16	; 22
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <x+0x1>
 1a0:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <x>
 1a4:	0f 97       	sbiw	r24, 0x0f	; 15
 1a6:	c1 f3       	breq	.-16     	; 0x198 <waiting_for_keypress+0x46>
 1a8:	d8 ba       	out	0x18, r13	; 24
 1aa:	86 b3       	in	r24, 0x16	; 22
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <x+0x1>
 1b2:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <x>
 1b6:	8f 3e       	cpi	r24, 0xEF	; 239
 1b8:	91 05       	cpc	r25, r1
 1ba:	41 f0       	breq	.+16     	; 0x1cc <waiting_for_keypress+0x7a>
 1bc:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <r1+0x1>
 1c0:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <r1>
 1c4:	0e 94 62 00 	call	0xc4	; 0xc4 <search>
 1c8:	8e 36       	cpi	r24, 0x6E	; 110
 1ca:	c1 f5       	brne	.+112    	; 0x23c <waiting_for_keypress+0xea>
 1cc:	c8 ba       	out	0x18, r12	; 24
 1ce:	86 b3       	in	r24, 0x16	; 22
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <x+0x1>
 1d6:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <x>
 1da:	8f 3d       	cpi	r24, 0xDF	; 223
 1dc:	91 05       	cpc	r25, r1
 1de:	41 f0       	breq	.+16     	; 0x1f0 <waiting_for_keypress+0x9e>
 1e0:	10 93 19 01 	sts	0x0119, r17	; 0x800119 <r1+0x1>
 1e4:	00 93 18 01 	sts	0x0118, r16	; 0x800118 <r1>
 1e8:	0e 94 62 00 	call	0xc4	; 0xc4 <search>
 1ec:	8e 36       	cpi	r24, 0x6E	; 110
 1ee:	31 f5       	brne	.+76     	; 0x23c <waiting_for_keypress+0xea>
 1f0:	b8 ba       	out	0x18, r11	; 24
 1f2:	86 b3       	in	r24, 0x16	; 22
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <x+0x1>
 1fa:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <x>
 1fe:	8f 3b       	cpi	r24, 0xBF	; 191
 200:	91 05       	cpc	r25, r1
 202:	41 f0       	breq	.+16     	; 0x214 <waiting_for_keypress+0xc2>
 204:	d0 93 19 01 	sts	0x0119, r29	; 0x800119 <r1+0x1>
 208:	c0 93 18 01 	sts	0x0118, r28	; 0x800118 <r1>
 20c:	0e 94 62 00 	call	0xc4	; 0xc4 <search>
 210:	8e 36       	cpi	r24, 0x6E	; 110
 212:	a1 f4       	brne	.+40     	; 0x23c <waiting_for_keypress+0xea>
 214:	a8 ba       	out	0x18, r10	; 24
 216:	86 b3       	in	r24, 0x16	; 22
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <x+0x1>
 21e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <x>
 222:	8f 37       	cpi	r24, 0x7F	; 127
 224:	91 05       	cpc	r25, r1
 226:	09 f4       	brne	.+2      	; 0x22a <waiting_for_keypress+0xd8>
 228:	b7 cf       	rjmp	.-146    	; 0x198 <waiting_for_keypress+0x46>
 22a:	f0 92 19 01 	sts	0x0119, r15	; 0x800119 <r1+0x1>
 22e:	e0 92 18 01 	sts	0x0118, r14	; 0x800118 <r1>
 232:	0e 94 62 00 	call	0xc4	; 0xc4 <search>
 236:	8e 36       	cpi	r24, 0x6E	; 110
 238:	09 f4       	brne	.+2      	; 0x23c <waiting_for_keypress+0xea>
 23a:	ae cf       	rjmp	.-164    	; 0x198 <waiting_for_keypress+0x46>
 23c:	0e 94 62 00 	call	0xc4	; 0xc4 <search>
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	1f 91       	pop	r17
 246:	0f 91       	pop	r16
 248:	ff 90       	pop	r15
 24a:	ef 90       	pop	r14
 24c:	df 90       	pop	r13
 24e:	cf 90       	pop	r12
 250:	bf 90       	pop	r11
 252:	af 90       	pop	r10
 254:	08 95       	ret

00000256 <keypad_get_number>:
 256:	84 31       	cpi	r24, 0x14	; 20
 258:	91 05       	cpc	r25, r1
 25a:	b8 f4       	brcc	.+46     	; 0x28a <keypad_get_number+0x34>
 25c:	fc 01       	movw	r30, r24
 25e:	e6 5d       	subi	r30, 0xD6	; 214
 260:	ff 4f       	sbci	r31, 0xFF	; 255
 262:	0c 94 bf 03 	jmp	0x77e	; 0x77e <__tablejump2__>
 266:	81 e3       	ldi	r24, 0x31	; 49
 268:	08 95       	ret
 26a:	82 e3       	ldi	r24, 0x32	; 50
 26c:	08 95       	ret
 26e:	83 e3       	ldi	r24, 0x33	; 51
 270:	08 95       	ret
 272:	84 e3       	ldi	r24, 0x34	; 52
 274:	08 95       	ret
 276:	85 e3       	ldi	r24, 0x35	; 53
 278:	08 95       	ret
 27a:	86 e3       	ldi	r24, 0x36	; 54
 27c:	08 95       	ret
 27e:	87 e3       	ldi	r24, 0x37	; 55
 280:	08 95       	ret
 282:	88 e3       	ldi	r24, 0x38	; 56
 284:	08 95       	ret
 286:	89 e3       	ldi	r24, 0x39	; 57
 288:	08 95       	ret
 28a:	8f ef       	ldi	r24, 0xFF	; 255
 28c:	08 95       	ret
 28e:	80 e3       	ldi	r24, 0x30	; 48
 290:	08 95       	ret

00000292 <i2c_init>:
 292:	82 e6       	ldi	r24, 0x62	; 98
 294:	80 b9       	out	0x00, r24	; 0
 296:	84 e0       	ldi	r24, 0x04	; 4
 298:	86 bf       	out	0x36, r24	; 54
 29a:	11 b8       	out	0x01, r1	; 1
 29c:	08 95       	ret

0000029e <i2c_start>:
 29e:	84 ea       	ldi	r24, 0xA4	; 164
 2a0:	86 bf       	out	0x36, r24	; 54
 2a2:	06 b6       	in	r0, 0x36	; 54
 2a4:	07 fe       	sbrs	r0, 7
 2a6:	fd cf       	rjmp	.-6      	; 0x2a2 <i2c_start+0x4>
 2a8:	08 95       	ret

000002aa <i2c_write>:
 2aa:	83 b9       	out	0x03, r24	; 3
 2ac:	84 e8       	ldi	r24, 0x84	; 132
 2ae:	86 bf       	out	0x36, r24	; 54
 2b0:	06 b6       	in	r0, 0x36	; 54
 2b2:	07 fe       	sbrs	r0, 7
 2b4:	fd cf       	rjmp	.-6      	; 0x2b0 <i2c_write+0x6>
 2b6:	08 95       	ret

000002b8 <delay>:
 2b8:	99 23       	and	r25, r25
 2ba:	54 f4       	brge	.+20     	; 0x2d0 <delay+0x18>
 2bc:	08 95       	ret
 2be:	21 50       	subi	r18, 0x01	; 1
 2c0:	31 09       	sbc	r19, r1
 2c2:	e9 f7       	brne	.-6      	; 0x2be <delay+0x6>
 2c4:	4f 5f       	subi	r20, 0xFF	; 255
 2c6:	5f 4f       	sbci	r21, 0xFF	; 255
 2c8:	84 17       	cp	r24, r20
 2ca:	95 07       	cpc	r25, r21
 2cc:	1c f4       	brge	.+6      	; 0x2d4 <delay+0x1c>
 2ce:	08 95       	ret
 2d0:	40 e0       	ldi	r20, 0x00	; 0
 2d2:	50 e0       	ldi	r21, 0x00	; 0
 2d4:	29 e7       	ldi	r18, 0x79	; 121
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	f2 cf       	rjmp	.-28     	; 0x2be <delay+0x6>

000002da <toggle>:
 2da:	19 9a       	sbi	0x03, 1	; 3
 2dc:	84 e8       	ldi	r24, 0x84	; 132
 2de:	86 bf       	out	0x36, r24	; 54
 2e0:	06 b6       	in	r0, 0x36	; 54
 2e2:	07 fe       	sbrs	r0, 7
 2e4:	fd cf       	rjmp	.-6      	; 0x2e0 <toggle+0x6>
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <delay>
 2ee:	19 98       	cbi	0x03, 1	; 3
 2f0:	84 e8       	ldi	r24, 0x84	; 132
 2f2:	86 bf       	out	0x36, r24	; 54
 2f4:	06 b6       	in	r0, 0x36	; 54
 2f6:	07 fe       	sbrs	r0, 7
 2f8:	fd cf       	rjmp	.-6      	; 0x2f4 <toggle+0x1a>
 2fa:	08 95       	ret

000002fc <lcd_cmd_hf>:
 2fc:	18 98       	cbi	0x03, 0	; 3
 2fe:	94 e8       	ldi	r25, 0x84	; 132
 300:	96 bf       	out	0x36, r25	; 54
 302:	06 b6       	in	r0, 0x36	; 54
 304:	07 fe       	sbrs	r0, 7
 306:	fd cf       	rjmp	.-6      	; 0x302 <lcd_cmd_hf+0x6>
 308:	93 b1       	in	r25, 0x03	; 3
 30a:	9f 70       	andi	r25, 0x0F	; 15
 30c:	93 b9       	out	0x03, r25	; 3
 30e:	94 e8       	ldi	r25, 0x84	; 132
 310:	96 bf       	out	0x36, r25	; 54
 312:	06 b6       	in	r0, 0x36	; 54
 314:	07 fe       	sbrs	r0, 7
 316:	fd cf       	rjmp	.-6      	; 0x312 <lcd_cmd_hf+0x16>
 318:	93 b1       	in	r25, 0x03	; 3
 31a:	80 7f       	andi	r24, 0xF0	; 240
 31c:	89 2b       	or	r24, r25
 31e:	83 b9       	out	0x03, r24	; 3
 320:	84 e8       	ldi	r24, 0x84	; 132
 322:	86 bf       	out	0x36, r24	; 54
 324:	06 b6       	in	r0, 0x36	; 54
 326:	07 fe       	sbrs	r0, 7
 328:	fd cf       	rjmp	.-6      	; 0x324 <lcd_cmd_hf+0x28>
 32a:	0e 94 6d 01 	call	0x2da	; 0x2da <toggle>
 32e:	08 95       	ret

00000330 <lcd_cmd>:
 330:	cf 93       	push	r28
 332:	c8 2f       	mov	r28, r24
 334:	18 98       	cbi	0x03, 0	; 3
 336:	84 e8       	ldi	r24, 0x84	; 132
 338:	86 bf       	out	0x36, r24	; 54
 33a:	06 b6       	in	r0, 0x36	; 54
 33c:	07 fe       	sbrs	r0, 7
 33e:	fd cf       	rjmp	.-6      	; 0x33a <lcd_cmd+0xa>
 340:	83 b1       	in	r24, 0x03	; 3
 342:	8f 70       	andi	r24, 0x0F	; 15
 344:	83 b9       	out	0x03, r24	; 3
 346:	84 e8       	ldi	r24, 0x84	; 132
 348:	86 bf       	out	0x36, r24	; 54
 34a:	06 b6       	in	r0, 0x36	; 54
 34c:	07 fe       	sbrs	r0, 7
 34e:	fd cf       	rjmp	.-6      	; 0x34a <lcd_cmd+0x1a>
 350:	83 b1       	in	r24, 0x03	; 3
 352:	9c 2f       	mov	r25, r28
 354:	90 7f       	andi	r25, 0xF0	; 240
 356:	89 2b       	or	r24, r25
 358:	83 b9       	out	0x03, r24	; 3
 35a:	84 e8       	ldi	r24, 0x84	; 132
 35c:	86 bf       	out	0x36, r24	; 54
 35e:	06 b6       	in	r0, 0x36	; 54
 360:	07 fe       	sbrs	r0, 7
 362:	fd cf       	rjmp	.-6      	; 0x35e <lcd_cmd+0x2e>
 364:	0e 94 6d 01 	call	0x2da	; 0x2da <toggle>
 368:	83 b1       	in	r24, 0x03	; 3
 36a:	8f 70       	andi	r24, 0x0F	; 15
 36c:	83 b9       	out	0x03, r24	; 3
 36e:	84 e8       	ldi	r24, 0x84	; 132
 370:	86 bf       	out	0x36, r24	; 54
 372:	06 b6       	in	r0, 0x36	; 54
 374:	07 fe       	sbrs	r0, 7
 376:	fd cf       	rjmp	.-6      	; 0x372 <lcd_cmd+0x42>
 378:	23 b1       	in	r18, 0x03	; 3
 37a:	30 e1       	ldi	r19, 0x10	; 16
 37c:	c3 9f       	mul	r28, r19
 37e:	c0 01       	movw	r24, r0
 380:	11 24       	eor	r1, r1
 382:	82 2b       	or	r24, r18
 384:	83 b9       	out	0x03, r24	; 3
 386:	84 e8       	ldi	r24, 0x84	; 132
 388:	86 bf       	out	0x36, r24	; 54
 38a:	06 b6       	in	r0, 0x36	; 54
 38c:	07 fe       	sbrs	r0, 7
 38e:	fd cf       	rjmp	.-6      	; 0x38a <lcd_cmd+0x5a>
 390:	0e 94 6d 01 	call	0x2da	; 0x2da <toggle>
 394:	cf 91       	pop	r28
 396:	08 95       	ret

00000398 <lcd_init>:
 398:	80 e3       	ldi	r24, 0x30	; 48
 39a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <lcd_cmd_hf>
 39e:	80 e3       	ldi	r24, 0x30	; 48
 3a0:	0e 94 7e 01 	call	0x2fc	; 0x2fc <lcd_cmd_hf>
 3a4:	80 e2       	ldi	r24, 0x20	; 32
 3a6:	0e 94 7e 01 	call	0x2fc	; 0x2fc <lcd_cmd_hf>
 3aa:	88 e2       	ldi	r24, 0x28	; 40
 3ac:	0e 94 98 01 	call	0x330	; 0x330 <lcd_cmd>
 3b0:	8c e0       	ldi	r24, 0x0C	; 12
 3b2:	0e 94 98 01 	call	0x330	; 0x330 <lcd_cmd>
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	0e 94 98 01 	call	0x330	; 0x330 <lcd_cmd>
 3bc:	86 e0       	ldi	r24, 0x06	; 6
 3be:	0e 94 98 01 	call	0x330	; 0x330 <lcd_cmd>
 3c2:	80 e8       	ldi	r24, 0x80	; 128
 3c4:	0e 94 98 01 	call	0x330	; 0x330 <lcd_cmd>
 3c8:	08 95       	ret

000003ca <lcd_dwr>:
 3ca:	cf 93       	push	r28
 3cc:	c8 2f       	mov	r28, r24
 3ce:	18 9a       	sbi	0x03, 0	; 3
 3d0:	84 e8       	ldi	r24, 0x84	; 132
 3d2:	86 bf       	out	0x36, r24	; 54
 3d4:	06 b6       	in	r0, 0x36	; 54
 3d6:	07 fe       	sbrs	r0, 7
 3d8:	fd cf       	rjmp	.-6      	; 0x3d4 <lcd_dwr+0xa>
 3da:	83 b1       	in	r24, 0x03	; 3
 3dc:	8f 70       	andi	r24, 0x0F	; 15
 3de:	83 b9       	out	0x03, r24	; 3
 3e0:	84 e8       	ldi	r24, 0x84	; 132
 3e2:	86 bf       	out	0x36, r24	; 54
 3e4:	06 b6       	in	r0, 0x36	; 54
 3e6:	07 fe       	sbrs	r0, 7
 3e8:	fd cf       	rjmp	.-6      	; 0x3e4 <lcd_dwr+0x1a>
 3ea:	83 b1       	in	r24, 0x03	; 3
 3ec:	9c 2f       	mov	r25, r28
 3ee:	90 7f       	andi	r25, 0xF0	; 240
 3f0:	89 2b       	or	r24, r25
 3f2:	83 b9       	out	0x03, r24	; 3
 3f4:	84 e8       	ldi	r24, 0x84	; 132
 3f6:	86 bf       	out	0x36, r24	; 54
 3f8:	06 b6       	in	r0, 0x36	; 54
 3fa:	07 fe       	sbrs	r0, 7
 3fc:	fd cf       	rjmp	.-6      	; 0x3f8 <lcd_dwr+0x2e>
 3fe:	0e 94 6d 01 	call	0x2da	; 0x2da <toggle>
 402:	83 b1       	in	r24, 0x03	; 3
 404:	8f 70       	andi	r24, 0x0F	; 15
 406:	83 b9       	out	0x03, r24	; 3
 408:	84 e8       	ldi	r24, 0x84	; 132
 40a:	86 bf       	out	0x36, r24	; 54
 40c:	06 b6       	in	r0, 0x36	; 54
 40e:	07 fe       	sbrs	r0, 7
 410:	fd cf       	rjmp	.-6      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 412:	23 b1       	in	r18, 0x03	; 3
 414:	30 e1       	ldi	r19, 0x10	; 16
 416:	c3 9f       	mul	r28, r19
 418:	c0 01       	movw	r24, r0
 41a:	11 24       	eor	r1, r1
 41c:	82 2b       	or	r24, r18
 41e:	83 b9       	out	0x03, r24	; 3
 420:	84 e8       	ldi	r24, 0x84	; 132
 422:	86 bf       	out	0x36, r24	; 54
 424:	06 b6       	in	r0, 0x36	; 54
 426:	07 fe       	sbrs	r0, 7
 428:	fd cf       	rjmp	.-6      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 42a:	0e 94 6d 01 	call	0x2da	; 0x2da <toggle>
 42e:	cf 91       	pop	r28
 430:	08 95       	ret

00000432 <lcd_msg>:
 432:	cf 93       	push	r28
 434:	df 93       	push	r29
 436:	ec 01       	movw	r28, r24
 438:	88 81       	ld	r24, Y
 43a:	88 23       	and	r24, r24
 43c:	31 f0       	breq	.+12     	; 0x44a <lcd_msg+0x18>
 43e:	21 96       	adiw	r28, 0x01	; 1
 440:	0e 94 e5 01 	call	0x3ca	; 0x3ca <lcd_dwr>
 444:	89 91       	ld	r24, Y+
 446:	81 11       	cpse	r24, r1
 448:	fb cf       	rjmp	.-10     	; 0x440 <lcd_msg+0xe>
 44a:	df 91       	pop	r29
 44c:	cf 91       	pop	r28
 44e:	08 95       	ret

00000450 <lcd_clear>:
}


void lcd_clear(void)
{
	lcd_cmd(1<<LCD_CLR);
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	0e 94 98 01 	call	0x330	; 0x330 <lcd_cmd>
 456:	08 95       	ret

00000458 <lcd_1stline>:
}

void lcd_1stline(void)
{
	lcd_cmd(0x80);
 458:	80 e8       	ldi	r24, 0x80	; 128
 45a:	0e 94 98 01 	call	0x330	; 0x330 <lcd_cmd>
 45e:	08 95       	ret

00000460 <lcd_2ndline>:
}

void lcd_2ndline(void)
{
	lcd_cmd(0xC0);
 460:	80 ec       	ldi	r24, 0xC0	; 192
 462:	0e 94 98 01 	call	0x330	; 0x330 <lcd_cmd>
 466:	08 95       	ret

00000468 <getAge>:


void getAge()
{
	
	lcd_clear();
 468:	0e 94 28 02 	call	0x450	; 0x450 <lcd_clear>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 46c:	2f ef       	ldi	r18, 0xFF	; 255
 46e:	84 e3       	ldi	r24, 0x34	; 52
 470:	9c e0       	ldi	r25, 0x0C	; 12
 472:	21 50       	subi	r18, 0x01	; 1
 474:	80 40       	sbci	r24, 0x00	; 0
 476:	90 40       	sbci	r25, 0x00	; 0
 478:	e1 f7       	brne	.-8      	; 0x472 <getAge+0xa>
 47a:	00 c0       	rjmp	.+0      	; 0x47c <getAge+0x14>
 47c:	00 00       	nop
	_delay_ms(500);
	lcd_msg("AGE: ");
 47e:	80 e7       	ldi	r24, 0x70	; 112
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	0e 94 19 02 	call	0x432	; 0x432 <lcd_msg>
 486:	2f ef       	ldi	r18, 0xFF	; 255
 488:	84 e3       	ldi	r24, 0x34	; 52
 48a:	9c e0       	ldi	r25, 0x0C	; 12
 48c:	21 50       	subi	r18, 0x01	; 1
 48e:	80 40       	sbci	r24, 0x00	; 0
 490:	90 40       	sbci	r25, 0x00	; 0
 492:	e1 f7       	brne	.-8      	; 0x48c <getAge+0x24>
 494:	00 c0       	rjmp	.+0      	; 0x496 <getAge+0x2e>
 496:	00 00       	nop
	_delay_ms(500);
	lcd_2ndline();
 498:	0e 94 30 02 	call	0x460	; 0x460 <lcd_2ndline>
	while(1){
		key = waiting_for_keypress();
 49c:	0e 94 a9 00 	call	0x152	; 0x152 <waiting_for_keypress>
 4a0:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <key>
		
		 if (key == BTN_OK) {
 4a4:	84 31       	cpi	r24, 0x14	; 20
 4a6:	91 f4       	brne	.+36     	; 0x4cc <getAge+0x64>
			 age = num;
 4a8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 4ac:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 4b0:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <age+0x1>
 4b4:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <age>
 4b8:	2f ef       	ldi	r18, 0xFF	; 255
 4ba:	84 e3       	ldi	r24, 0x34	; 52
 4bc:	9c e0       	ldi	r25, 0x0C	; 12
 4be:	21 50       	subi	r18, 0x01	; 1
 4c0:	80 40       	sbci	r24, 0x00	; 0
 4c2:	90 40       	sbci	r25, 0x00	; 0
 4c4:	e1 f7       	brne	.-8      	; 0x4be <getAge+0x56>
 4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <getAge+0x60>
 4c8:	00 00       	nop
		num += keypad_get_number(key)-48;
		
		delay(8500);
	}
	
}
 4ca:	08 95       	ret
			 age = num;
			 _delay_ms(500);
			 break;
		 }
		
		lcd_dwr(keypad_get_number(key));
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	0e 94 2b 01 	call	0x256	; 0x256 <keypad_get_number>
 4d2:	0e 94 e5 01 	call	0x3ca	; 0x3ca <lcd_dwr>
		num *= 10;      // num = 0 initial value
		num += keypad_get_number(key)-48;
 4d6:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <key>
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	0e 94 2b 01 	call	0x256	; 0x256 <keypad_get_number>
 4e0:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <__data_end>
 4e4:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <__data_end+0x1>
 4e8:	a9 01       	movw	r20, r18
 4ea:	44 0f       	add	r20, r20
 4ec:	55 1f       	adc	r21, r21
 4ee:	22 0f       	add	r18, r18
 4f0:	33 1f       	adc	r19, r19
 4f2:	22 0f       	add	r18, r18
 4f4:	33 1f       	adc	r19, r19
 4f6:	22 0f       	add	r18, r18
 4f8:	33 1f       	adc	r19, r19
 4fa:	24 0f       	add	r18, r20
 4fc:	35 1f       	adc	r19, r21
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	c0 97       	sbiw	r24, 0x30	; 48
 502:	82 0f       	add	r24, r18
 504:	93 1f       	adc	r25, r19
 506:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 50a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
		
		delay(8500);
 50e:	84 e3       	ldi	r24, 0x34	; 52
 510:	91 e2       	ldi	r25, 0x21	; 33
 512:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <delay>
	}
 516:	c2 cf       	rjmp	.-124    	; 0x49c <getAge+0x34>

00000518 <getGender>:
}


  void getGender()
  {
	  lcd_clear();
 518:	0e 94 28 02 	call	0x450	; 0x450 <lcd_clear>
 51c:	2f ef       	ldi	r18, 0xFF	; 255
 51e:	84 e3       	ldi	r24, 0x34	; 52
 520:	9c e0       	ldi	r25, 0x0C	; 12
 522:	21 50       	subi	r18, 0x01	; 1
 524:	80 40       	sbci	r24, 0x00	; 0
 526:	90 40       	sbci	r25, 0x00	; 0
 528:	e1 f7       	brne	.-8      	; 0x522 <getGender+0xa>
 52a:	00 c0       	rjmp	.+0      	; 0x52c <getGender+0x14>
 52c:	00 00       	nop
	  _delay_ms(500);
	  lcd_msg("Gender: ");
 52e:	86 e7       	ldi	r24, 0x76	; 118
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	0e 94 19 02 	call	0x432	; 0x432 <lcd_msg>
	  lcd_2ndline();
 536:	0e 94 30 02 	call	0x460	; 0x460 <lcd_2ndline>
	  lcd_msg("0.Male 1.Female");
 53a:	8f e7       	ldi	r24, 0x7F	; 127
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	0e 94 19 02 	call	0x432	; 0x432 <lcd_msg>
	  key = waiting_for_keypress();
 542:	0e 94 a9 00 	call	0x152	; 0x152 <waiting_for_keypress>
 546:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <key>
	  if (key == BTN_0) gender = 0;
 54a:	83 31       	cpi	r24, 0x13	; 19
 54c:	29 f4       	brne	.+10     	; 0x558 <getGender+0x40>
 54e:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <gender+0x1>
 552:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <gender>
 556:	08 c0       	rjmp	.+16     	; 0x568 <getGender+0x50>
	  if (key == BTN_1) gender = 1;
 558:	88 30       	cpi	r24, 0x08	; 8
 55a:	31 f4       	brne	.+12     	; 0x568 <getGender+0x50>
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <gender+0x1>
 564:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <gender>
	  lcd_clear();
 568:	0e 94 28 02 	call	0x450	; 0x450 <lcd_clear>
 56c:	08 95       	ret

0000056e <getPhoneNumber>:
  }
  
  
   void getPhoneNumber()
   {
 56e:	cf 93       	push	r28
 570:	df 93       	push	r29
 572:	2f ef       	ldi	r18, 0xFF	; 255
 574:	84 e3       	ldi	r24, 0x34	; 52
 576:	9c e0       	ldi	r25, 0x0C	; 12
 578:	21 50       	subi	r18, 0x01	; 1
 57a:	80 40       	sbci	r24, 0x00	; 0
 57c:	90 40       	sbci	r25, 0x00	; 0
 57e:	e1 f7       	brne	.-8      	; 0x578 <getPhoneNumber+0xa>
 580:	00 c0       	rjmp	.+0      	; 0x582 <getPhoneNumber+0x14>
 582:	00 00       	nop
	   int n = 0;
	   _delay_ms(500);
	   lcd_msg("Phone Number: ");
 584:	8f e8       	ldi	r24, 0x8F	; 143
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	0e 94 19 02 	call	0x432	; 0x432 <lcd_msg>
	   lcd_2ndline();
 58c:	0e 94 30 02 	call	0x460	; 0x460 <lcd_2ndline>
  }
  
  
   void getPhoneNumber()
   {
	   int n = 0;
 590:	c0 e0       	ldi	r28, 0x00	; 0
 592:	d0 e0       	ldi	r29, 0x00	; 0
	   _delay_ms(500);
	   lcd_msg("Phone Number: ");
	   lcd_2ndline();
	   while(1){
		   if (n == 10) break;
	       key = waiting_for_keypress();
 594:	0e 94 a9 00 	call	0x152	; 0x152 <waiting_for_keypress>
 598:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <key>
		   lcd_dwr(keypad_get_number(key));
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	0e 94 2b 01 	call	0x256	; 0x256 <keypad_get_number>
 5a2:	0e 94 e5 01 	call	0x3ca	; 0x3ca <lcd_dwr>
	       p_number[n] = key;
 5a6:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <key>
 5aa:	e0 91 1b 01 	lds	r30, 0x011B	; 0x80011b <p_number>
 5ae:	f0 91 1c 01 	lds	r31, 0x011C	; 0x80011c <p_number+0x1>
 5b2:	ec 0f       	add	r30, r28
 5b4:	fd 1f       	adc	r31, r29
 5b6:	80 83       	st	Z, r24
		   delay(8500);
 5b8:	84 e3       	ldi	r24, 0x34	; 52
 5ba:	91 e2       	ldi	r25, 0x21	; 33
 5bc:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <delay>
	       n++;
 5c0:	21 96       	adiw	r28, 0x01	; 1
	   int n = 0;
	   _delay_ms(500);
	   lcd_msg("Phone Number: ");
	   lcd_2ndline();
	   while(1){
		   if (n == 10) break;
 5c2:	ca 30       	cpi	r28, 0x0A	; 10
 5c4:	d1 05       	cpc	r29, r1
 5c6:	31 f7       	brne	.-52     	; 0x594 <getPhoneNumber+0x26>
	       p_number[n] = key;
		   delay(8500);
	       n++;
	   }
	  
	   lcd_clear();
 5c8:	0e 94 28 02 	call	0x450	; 0x450 <lcd_clear>
 5cc:	2f e7       	ldi	r18, 0x7F	; 127
 5ce:	8a e1       	ldi	r24, 0x1A	; 26
 5d0:	96 e0       	ldi	r25, 0x06	; 6
 5d2:	21 50       	subi	r18, 0x01	; 1
 5d4:	80 40       	sbci	r24, 0x00	; 0
 5d6:	90 40       	sbci	r25, 0x00	; 0
 5d8:	e1 f7       	brne	.-8      	; 0x5d2 <getPhoneNumber+0x64>
 5da:	00 c0       	rjmp	.+0      	; 0x5dc <getPhoneNumber+0x6e>
 5dc:	00 00       	nop
	   _delay_ms(250);
   }
 5de:	df 91       	pop	r29
 5e0:	cf 91       	pop	r28
 5e2:	08 95       	ret

000005e4 <sensorInstruction>:
		  break;
	  }
  }
  
  void sensorInstruction(char *c)
  {
 5e4:	cf 93       	push	r28
 5e6:	df 93       	push	r29
 5e8:	ec 01       	movw	r28, r24
	  lcd_clear();
 5ea:	0e 94 28 02 	call	0x450	; 0x450 <lcd_clear>
 5ee:	2f e7       	ldi	r18, 0x7F	; 127
 5f0:	8f e4       	ldi	r24, 0x4F	; 79
 5f2:	92 e1       	ldi	r25, 0x12	; 18
 5f4:	21 50       	subi	r18, 0x01	; 1
 5f6:	80 40       	sbci	r24, 0x00	; 0
 5f8:	90 40       	sbci	r25, 0x00	; 0
 5fa:	e1 f7       	brne	.-8      	; 0x5f4 <sensorInstruction+0x10>
 5fc:	00 c0       	rjmp	.+0      	; 0x5fe <sensorInstruction+0x1a>
 5fe:	00 00       	nop
	   _delay_ms(750);
	  lcd_msg(c);
 600:	ce 01       	movw	r24, r28
 602:	0e 94 19 02 	call	0x432	; 0x432 <lcd_msg>
 606:	2f ef       	ldi	r18, 0xFF	; 255
 608:	84 e3       	ldi	r24, 0x34	; 52
 60a:	9c e0       	ldi	r25, 0x0C	; 12
 60c:	21 50       	subi	r18, 0x01	; 1
 60e:	80 40       	sbci	r24, 0x00	; 0
 610:	90 40       	sbci	r25, 0x00	; 0
 612:	e1 f7       	brne	.-8      	; 0x60c <sensorInstruction+0x28>
 614:	00 c0       	rjmp	.+0      	; 0x616 <sensorInstruction+0x32>
 616:	00 00       	nop
	  _delay_ms(500);
  }
 618:	df 91       	pop	r29
 61a:	cf 91       	pop	r28
 61c:	08 95       	ret

0000061e <pushSensor>:
	  

  void pushSensor(int n)
  {
	  
	 PORTD = n; 
 61e:	82 bb       	out	0x12, r24	; 18
	  
	 //Configure TIMER1
	 TCCR1A|=(1<<COM1A1)|(1<<COM1B1)|(1<<WGM11);        //NON Inverted PWM
 620:	8f b5       	in	r24, 0x2f	; 47
 622:	82 6a       	ori	r24, 0xA2	; 162
 624:	8f bd       	out	0x2f, r24	; 47
	 TCCR1B|=(1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10); //PRESCALER=64 MODE 14(FAST PWM)
 626:	8e b5       	in	r24, 0x2e	; 46
 628:	8b 61       	ori	r24, 0x1B	; 27
 62a:	8e bd       	out	0x2e, r24	; 46

	 ICR1=4999;  //fPWM=50Hz (Period = 20ms Standard).
 62c:	87 e8       	ldi	r24, 0x87	; 135
 62e:	93 e1       	ldi	r25, 0x13	; 19
 630:	97 bd       	out	0x27, r25	; 39
 632:	86 bd       	out	0x26, r24	; 38

	 DDRD|=(1<<PD4)|(1<<PD5);   //PWM Pins as Out
 634:	81 b3       	in	r24, 0x11	; 17
 636:	80 63       	ori	r24, 0x30	; 48
 638:	81 bb       	out	0x11, r24	; 17


	 OCR1A=500;  //180 degree
 63a:	84 ef       	ldi	r24, 0xF4	; 244
 63c:	91 e0       	ldi	r25, 0x01	; 1
 63e:	9b bd       	out	0x2b, r25	; 43
 640:	8a bd       	out	0x2a, r24	; 42
 642:	08 95       	ret

00000644 <sensor>:
 644:	2f e7       	ldi	r18, 0x7F	; 127
 646:	8f e4       	ldi	r24, 0x4F	; 79
 648:	92 e1       	ldi	r25, 0x12	; 18
 64a:	21 50       	subi	r18, 0x01	; 1
 64c:	80 40       	sbci	r24, 0x00	; 0
 64e:	90 40       	sbci	r25, 0x00	; 0
 650:	e1 f7       	brne	.-8      	; 0x64a <sensor+0x6>
 652:	00 c0       	rjmp	.+0      	; 0x654 <sensor+0x10>
 654:	00 00       	nop
 
  
  void sensor()
  {
	   _delay_ms(750);
	  lcd_msg("Select: ");
 656:	8e e9       	ldi	r24, 0x9E	; 158
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	0e 94 19 02 	call	0x432	; 0x432 <lcd_msg>
	  lcd_2ndline();
 65e:	0e 94 30 02 	call	0x460	; 0x460 <lcd_2ndline>
	  lcd_msg("0.T 1.O 2.E 3.H");
 662:	87 ea       	ldi	r24, 0xA7	; 167
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	0e 94 19 02 	call	0x432	; 0x432 <lcd_msg>
	  key = waiting_for_keypress();
 66a:	0e 94 a9 00 	call	0x152	; 0x152 <waiting_for_keypress>
 66e:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <key>
	  switch(key)
 672:	89 30       	cpi	r24, 0x09	; 9
 674:	d1 f0       	breq	.+52     	; 0x6aa <sensor+0x66>
 676:	18 f4       	brcc	.+6      	; 0x67e <sensor+0x3a>
 678:	88 30       	cpi	r24, 0x08	; 8
 67a:	71 f0       	breq	.+28     	; 0x698 <sensor+0x54>
 67c:	28 c0       	rjmp	.+80     	; 0x6ce <sensor+0x8a>
 67e:	80 31       	cpi	r24, 0x10	; 16
 680:	e9 f0       	breq	.+58     	; 0x6bc <sensor+0x78>
 682:	83 31       	cpi	r24, 0x13	; 19
 684:	21 f5       	brne	.+72     	; 0x6ce <sensor+0x8a>
	  {
		  case BTN_0:
		  sensorInstruction("PlaceYourFinger");
 686:	87 eb       	ldi	r24, 0xB7	; 183
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <sensorInstruction>
		  // Push The Sensor code
		 pushSensor(TEMP_SENSOR);
 68e:	80 e0       	ldi	r24, 0x00	; 0
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	0e 94 0f 03 	call	0x61e	; 0x61e <pushSensor>
		  
		  
		 //_delay_ms(10000);
        //  pullSensor(TEMP_SENSOR);
		//  pullSensor(GSM_SENSOR);
		  break;
 696:	08 95       	ret
		  case BTN_1:
		  sensorInstruction("PlaceYourThump");
 698:	87 ec       	ldi	r24, 0xC7	; 199
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <sensorInstruction>
		  // Push The Sensor code
		 pushSensor(OXY_SENSOR);
 6a0:	81 e0       	ldi	r24, 0x01	; 1
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	0e 94 0f 03 	call	0x61e	; 0x61e <pushSensor>
		  
		 //  _delay_ms(10000);
		//   pushSensor(OXY_SENSOR);
	//	_delay_ms(10000);
	//	pullSensor(OXY_SENSOR);
		  break;
 6a8:	08 95       	ret
		  case BTN_2:
		  sensorInstruction("PlaceYourThump");
 6aa:	87 ec       	ldi	r24, 0xC7	; 199
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <sensorInstruction>
		  // Push The Sensor code
		pushSensor(ECG_SENSOR);
 6b2:	82 e0       	ldi	r24, 0x02	; 2
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	0e 94 0f 03 	call	0x61e	; 0x61e <pushSensor>
		  
	//	 _delay_ms(10000);
		 // pushSensor(ECG_SENSOR);
		 //_delay_ms(10000);
	//	 pullSensor(ECG_SENSOR);
		  break;
 6ba:	08 95       	ret
		  case BTN_3:
		  sensorInstruction("Putitonyourchest");
 6bc:	86 ed       	ldi	r24, 0xD6	; 214
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <sensorInstruction>
		  // Push The Sensor code
		  pushSensor(HEART_SENSOR);
 6c4:	83 e0       	ldi	r24, 0x03	; 3
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	0e 94 0f 03 	call	0x61e	; 0x61e <pushSensor>
		  
		// _delay_ms(10000);
		// pushSensor(HEART_SENSOR);
	//	 _delay_ms(10000);
	//	 pullSensor(HEART_SENSOR);
		  break;
 6cc:	08 95       	ret
	      default:
		  lcd_clear();
 6ce:	0e 94 28 02 	call	0x450	; 0x450 <lcd_clear>
 6d2:	2f ef       	ldi	r18, 0xFF	; 255
 6d4:	84 e3       	ldi	r24, 0x34	; 52
 6d6:	9c e0       	ldi	r25, 0x0C	; 12
 6d8:	21 50       	subi	r18, 0x01	; 1
 6da:	80 40       	sbci	r24, 0x00	; 0
 6dc:	90 40       	sbci	r25, 0x00	; 0
 6de:	e1 f7       	brne	.-8      	; 0x6d8 <sensor+0x94>
 6e0:	00 c0       	rjmp	.+0      	; 0x6e2 <sensor+0x9e>
 6e2:	00 00       	nop
		  _delay_ms(500);
		  lcd_msg("Wrong input");
 6e4:	87 ee       	ldi	r24, 0xE7	; 231
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	0e 94 19 02 	call	0x432	; 0x432 <lcd_msg>
 6ec:	2f ef       	ldi	r18, 0xFF	; 255
 6ee:	89 e6       	ldi	r24, 0x69	; 105
 6f0:	98 e1       	ldi	r25, 0x18	; 24
 6f2:	21 50       	subi	r18, 0x01	; 1
 6f4:	80 40       	sbci	r24, 0x00	; 0
 6f6:	90 40       	sbci	r25, 0x00	; 0
 6f8:	e1 f7       	brne	.-8      	; 0x6f2 <sensor+0xae>
 6fa:	00 c0       	rjmp	.+0      	; 0x6fc <sensor+0xb8>
 6fc:	00 00       	nop
 6fe:	08 95       	ret

00000700 <main>:


int main(void)
{
	
	keypad_init();
 700:	0e 94 5d 00 	call	0xba	; 0xba <keypad_init>
	
	i2c_init();
 704:	0e 94 49 01 	call	0x292	; 0x292 <i2c_init>
	i2c_start();
 708:	0e 94 4f 01 	call	0x29e	; 0x29e <i2c_start>
	i2c_write(0x70);
 70c:	80 e7       	ldi	r24, 0x70	; 112
 70e:	0e 94 55 01 	call	0x2aa	; 0x2aa <i2c_write>
	lcd_init();
 712:	0e 94 cc 01 	call	0x398	; 0x398 <lcd_init>
	
	lcd_clear();			/* Clear LCD */
 716:	0e 94 28 02 	call	0x450	; 0x450 <lcd_clear>
 71a:	2f ef       	ldi	r18, 0xFF	; 255
 71c:	81 ee       	ldi	r24, 0xE1	; 225
 71e:	94 e0       	ldi	r25, 0x04	; 4
 720:	21 50       	subi	r18, 0x01	; 1
 722:	80 40       	sbci	r24, 0x00	; 0
 724:	90 40       	sbci	r25, 0x00	; 0
 726:	e1 f7       	brne	.-8      	; 0x720 <main+0x20>
 728:	00 c0       	rjmp	.+0      	; 0x72a <main+0x2a>
 72a:	00 00       	nop
	_delay_ms(200);
	lcd_1stline();
 72c:	0e 94 2c 02 	call	0x458	; 0x458 <lcd_1stline>
	lcd_msg("WELCOME...." );
 730:	83 ef       	ldi	r24, 0xF3	; 243
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	0e 94 19 02 	call	0x432	; 0x432 <lcd_msg>
 738:	2f ef       	ldi	r18, 0xFF	; 255
 73a:	89 e6       	ldi	r24, 0x69	; 105
 73c:	98 e1       	ldi	r25, 0x18	; 24
 73e:	21 50       	subi	r18, 0x01	; 1
 740:	80 40       	sbci	r24, 0x00	; 0
 742:	90 40       	sbci	r25, 0x00	; 0
 744:	e1 f7       	brne	.-8      	; 0x73e <main+0x3e>
 746:	00 c0       	rjmp	.+0      	; 0x748 <main+0x48>
 748:	00 00       	nop
	_delay_ms(1000);
	lcd_2ndline();
 74a:	0e 94 30 02 	call	0x460	; 0x460 <lcd_2ndline>
	lcd_msg("Mobile Medi Box");
 74e:	8f ef       	ldi	r24, 0xFF	; 255
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	0e 94 19 02 	call	0x432	; 0x432 <lcd_msg>
 756:	2f ef       	ldi	r18, 0xFF	; 255
 758:	89 e6       	ldi	r24, 0x69	; 105
 75a:	98 e1       	ldi	r25, 0x18	; 24
 75c:	21 50       	subi	r18, 0x01	; 1
 75e:	80 40       	sbci	r24, 0x00	; 0
 760:	90 40       	sbci	r25, 0x00	; 0
 762:	e1 f7       	brne	.-8      	; 0x75c <main+0x5c>
 764:	00 c0       	rjmp	.+0      	; 0x766 <main+0x66>
 766:	00 00       	nop

	
	//while (1)
	//{
		
     	getAge();                         // For Getting Age
 768:	0e 94 34 02 	call	0x468	; 0x468 <getAge>
		getGender();                      // For Getting Gender
 76c:	0e 94 8c 02 	call	0x518	; 0x518 <getGender>
		getPhoneNumber();
 770:	0e 94 b7 02 	call	0x56e	; 0x56e <getPhoneNumber>
	    sensor();                         // For Sensor Selection And Functions
 774:	0e 94 22 03 	call	0x644	; 0x644 <sensor>
	//}
	
}
 778:	80 e0       	ldi	r24, 0x00	; 0
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	08 95       	ret

0000077e <__tablejump2__>:
 77e:	ee 0f       	add	r30, r30
 780:	ff 1f       	adc	r31, r31
 782:	05 90       	lpm	r0, Z+
 784:	f4 91       	lpm	r31, Z
 786:	e0 2d       	mov	r30, r0
 788:	09 94       	ijmp

0000078a <_exit>:
 78a:	f8 94       	cli

0000078c <__stop_program>:
 78c:	ff cf       	rjmp	.-2      	; 0x78c <__stop_program>
